{
	"info": {
		"_postman_id": "6b930a90-7836-4359-b1c4-3d3d266463cc",
		"name": "Job Scheduler API Tests",
		"description": "Comprehensive test cases for Job Scheduler API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34747541"
	},
	"item": [
		{
			"name": "Environment Setup",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set('base_url', 'http://localhost:8080/api');",
									"pm.environment.set('test_job_id', '');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"admin\",\r\n  \"password\": \"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticate User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.set('base_url', 'http://localhost:8080/api');",
									"pm.environment.set('test_job_id', '');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"admin\",\r\n  \"password\": \"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auth/authenticate",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"authenticate"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Job Creation Tests",
			"item": [
				{
					"name": "Create CRON Job",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => pm.response.to.have.status(201));",
									"pm.test(\"Response has nextRunAt\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.nextRunAt).to.not.be.null;",
									"    pm.environment.set('cron_job_id', jsonData.id);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"testing\",\n  \"scheduleType\": \"CRON\",\n  \"cronExpression\": \"0 0 9 * * ? *\",\n  \"payload\": {\n    \"reportType\": \"sales\",\n    \"recipients\": [\"manager@company.com\"]\n  },\n  \"retryPolicy\": {\n    \"maxAttempts\": 3,\n    \"backoffMs\": 60000\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/jobs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"jobs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creating a Per-Second Job",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => pm.response.to.have.status(201));",
									"pm.test(\"Response has nextRunAt\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.nextRunAt).to.not.be.null;",
									"    pm.environment.set('cron_job_id', jsonData.id);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"per-second-job\",\n  \"scheduleType\": \"CRON\",\n  \"cronExpression\": \"0/1 * * * * ?\",\n  \"payload\": {\n    \"action\": \"heartbeat\"\n  }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/jobs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"jobs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Fixed Rate Job",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => pm.response.to.have.status(201));",
									"pm.test(\"Next run is ~1 hour from now\", () => {",
									"    const jsonData = pm.response.json();",
									"    const nextRun = new Date(jsonData.nextRunAt).getTime();",
									"    const now = new Date().getTime();",
									"    pm.expect(nextRun).to.be.closeTo(now + 3600000, 60000);",
									"    pm.environment.set('fixed_rate_job_id', jsonData.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"cache-cleanup\",\n  \"scheduleType\": \"FIXED_RATE\",\n  \"fixedRateMs\": 3600000,\n  \"payload\": {\n    \"operation\": \"clean_temp_files\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/jobs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"jobs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Duplicate Job Prevention",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 409\", () => pm.response.to.have.status(409));",
									"pm.test(\"Error message about duplicate\", () => {",
									"    pm.expect(pm.response.text()).to.include(\"already exists\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"daily-report\",\n  \"scheduleType\": \"CRON\",\n  \"cronExpression\": \"0 0 9 * * *\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/jobs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"jobs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid CRON Expression",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => pm.response.to.have.status(400));",
									"pm.test(\"Validation error present\", () => {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.errors.cronExpression).to.exist;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"invalid-cron\",\n  \"scheduleType\": \"CRON\",\n  \"cronExpression\": \"invalid\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/jobs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"jobs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Fixed Rate Job Per Second",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", () => pm.response.to.have.status(201));",
									"pm.test(\"Next run is ~1 hour from now\", () => {",
									"    const jsonData = pm.response.json();",
									"    const nextRun = new Date(jsonData.nextRunAt).getTime();",
									"    const now = new Date().getTime();",
									"    pm.expect(nextRun).to.be.closeTo(now + 3600000, 60000);",
									"    pm.environment.set('fixed_rate_job_id', jsonData.id);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"per-second-fixed-job\",\n  \"scheduleType\": \"FIXED_RATE\",\n  \"fixedRateMs\": 1000, // 1000ms = 1 second\n  \"payload\": {\n    \"action\": \"log-heartbeat\",\n    \"message\": \"Fixed rate alive!\"\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/jobs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"jobs"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Job Management Tests",
			"item": [
				{
					"name": "Pause a Job",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
									"pm.test(\"Job is paused\", () => {",
									"    pm.expect(pm.response.json().status).to.eql(\"PAUSED\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/jobs/{{test_job_id}}/status?status=PAUSED",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"jobs",
								"{{test_job_id}}",
								"status"
							],
							"query": [
								{
									"key": "status",
									"value": "PAUSED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Resume a Job",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
									"pm.test(\"Job is active\", () => {",
									"    pm.expect(pm.response.json().status).to.eql(\"ACTIVE\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/jobs/{{test_job_id}}/status?status=ACTIVE",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"jobs",
								"{{test_job_id}}",
								"status"
							],
							"query": [
								{
									"key": "status",
									"value": "ACTIVE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Cancel a Job",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
									"pm.test(\"Job is cancelled\", () => {",
									"    pm.expect(pm.response.json().status).to.eql(\"CANCELLED\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{base_url}}/jobs/{{test_job_id}}/status?status=CANCELLED",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"jobs",
								"{{test_job_id}}",
								"status"
							],
							"query": [
								{
									"key": "status",
									"value": "CANCELLED"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Retry Policy Tests",
			"item": [
				{
					"name": "Create Job With Retry Policy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Job created successfully\", () => pm.response.to.have.status(201));",
									"pm.environment.set('retry_job_id', pm.response.json().id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"failing-job\",\n  \"scheduleType\": \"FIXED_RATE\",\n  \"fixedRateMs\": 5000,\n  \"retryPolicy\": {\n    \"maxAttempts\": 2,\n    \"backoffMs\": 10000\n  },\n  \"payload\": {\n    \"simulateFailure\": true\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/jobs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"jobs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Retry Behavior",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check retry state\", () => {",
									"    const job = pm.response.json();",
									"    if (job.status === 'CANCELLED') {",
									"        pm.expect(job.retryPolicy.currentAttempt).to.eql(2);",
									"    } else {",
									"        pm.expect(job.retryPolicy.currentAttempt).to.be.at.least(1);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/jobs/{{retry_job_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"jobs",
								"{{retry_job_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Monitoring Endpoints",
			"item": [
				{
					"name": "Get All Jobs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
									"pm.test(\"Returns job list\", () => {",
									"    pm.expect(pm.response.json().content).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/jobs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"jobs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Job Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
									"pm.test(\"Returns correct job\", () => {",
									"    pm.expect(pm.response.json().id).to.eql(pm.environment.get('cron_job_id'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/jobs/{{cron_job_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"jobs",
								"{{cron_job_id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080/api"
		}
	]
}